// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
SpeedController* RobotMap::drivetrainSpeedController1 = NULL;
SpeedController* RobotMap::drivetrainSpeedController2 = NULL;
SpeedController* RobotMap::drivetrainSpeedController3 = NULL;
SpeedController* RobotMap::drivetrainSpeedController4 = NULL;
RobotDrive* RobotMap::drivetrainRobotDrive41 = NULL;
Encoder* RobotMap::drivetrainQuadratureEncoderLeft = NULL;
Encoder* RobotMap::drivetrainQuadratureEncoderRight = NULL;
DigitalInput* RobotMap::liftLimitSwitch1 = NULL;
SpeedController* RobotMap::liftSpeedControllerLift = NULL;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();

	drivetrainSpeedController1 = new Talon(0);
	lw->AddActuator("Drivetrain", "Speed Controller 1", (Talon*) drivetrainSpeedController1);
	
	drivetrainSpeedController2 = new Talon(1);
	lw->AddActuator("Drivetrain", "Speed Controller 2", (Talon*) drivetrainSpeedController2);
	
	drivetrainSpeedController3 = new Talon(2);
	lw->AddActuator("Drivetrain", "Speed Controller 3", (Talon*) drivetrainSpeedController3);
	
	drivetrainSpeedController4 = new Talon(3);
	lw->AddActuator("Drivetrain", "Speed Controller 4", (Talon*) drivetrainSpeedController4);
	
	drivetrainRobotDrive41 = new RobotDrive(drivetrainSpeedController1, drivetrainSpeedController2,
              drivetrainSpeedController3, drivetrainSpeedController4);
	
	drivetrainRobotDrive41->SetSafetyEnabled(true);
        drivetrainRobotDrive41->SetExpiration(0.1);
        drivetrainRobotDrive41->SetSensitivity(0.5);
        drivetrainRobotDrive41->SetMaxOutput(1.0);
        drivetrainRobotDrive41->SetInvertedMotor(RobotDrive::kFrontLeftMotor, true);
        drivetrainRobotDrive41->SetInvertedMotor(RobotDrive::kRearLeftMotor, true);
        drivetrainRobotDrive41->SetInvertedMotor(RobotDrive::kFrontRightMotor, true);
        drivetrainRobotDrive41->SetInvertedMotor(RobotDrive::kRearRightMotor, true);
	drivetrainQuadratureEncoderLeft = new Encoder(2, 3, false, Encoder::k4X);
	lw->AddSensor("Drivetrain", "Quadrature Encoder Left", drivetrainQuadratureEncoderLeft);
	drivetrainQuadratureEncoderLeft->SetDistancePerPulse(1.0);
        drivetrainQuadratureEncoderLeft->SetPIDSourceParameter(Encoder::kRate);
	drivetrainQuadratureEncoderRight = new Encoder(4, 5, false, Encoder::k4X);
	lw->AddSensor("Drivetrain", "Quadrature Encoder Right", drivetrainQuadratureEncoderRight);
	drivetrainQuadratureEncoderRight->SetDistancePerPulse(1.0);
        drivetrainQuadratureEncoderRight->SetPIDSourceParameter(Encoder::kRate);
	liftLimitSwitch1 = new DigitalInput(0);
	lw->AddSensor("Lift", "Limit Switch 1", liftLimitSwitch1);
	
	liftSpeedControllerLift = new TalonSRX(4);
	lw->AddActuator("Lift", "Speed Controller Lift", (TalonSRX*) liftSpeedControllerLift);
	


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
